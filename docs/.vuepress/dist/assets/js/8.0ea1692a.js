(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{364:function(t,a,e){"use strict";e.r(a);var s=e(42),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"事件循环eventloop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件循环eventloop"}},[t._v("#")]),t._v(" 事件循环EventLoop")]),t._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("Event Loop即事件循环，是指浏览器或Node的一种解决javaScript单线程运行时不会阻塞的一种机制，也就是我们经常使用异步的原理。这里主要针对浏览器展开。")]),t._v(" "),e("h3",{attrs:{id:"举个栗子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#举个栗子"}},[t._v("#")]),t._v(" 举个栗子")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// code\n")])])]),e("p",[t._v("是不是有些打脑壳？唠嗑一句，学得越多越觉得自己是井底之蛙有没有。")])])}),[],!1,null,null,null);a.default=r.exports}}]);